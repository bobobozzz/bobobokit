set nocompatible

filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'Tagbar'
Plugin 'SimpylFold'
Plugin 'ctrlp.vim'
Plugin 'SirVer/ultisnips'
Plugin 'bobobozzz/vim-snippets'
Plugin 'axiaoxin/vim-json-line-format'
Plugin 'xml.vim'
Plugin 'aklt/plantuml-syntax'
Plugin 'tomlion/vim-solidity'
Plugin 'go.vim'
Plugin 'tell-k/vim-autopep8'
Plugin 'rizzatti/dash.vim'
call vundle#end()
filetype plugin indent on

syntax on
set nu
set encoding=utf-8
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set autoindent
set fileformat=unix
set wrap
set noerrorbells
set clipboard=unnamed
set foldmethod=indent
set foldlevel=9999
set smartcase
set ruler
set nohls

inoremap vv <ESC>

vmap by :w !pbcopy<CR><CR>
nmap bp :r !pbpaste<CR><CR>

let g:ctrlp_map = '<c-a>'
let g:ctrlp_cmd = 'CtrlP'
nmap <leader>s :TagbarOpen fj<CR>
nmap <leader>f :TagbarClose<CR>
map <leader>xml :1,$!xmllint --format -<CR>
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

let g:UltiSnipsExpandTrigger="<c-l>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsEditSplit="vertical"

let g:ctrlp_working_path_mode = '0'

let g:Tlist_Ctags_Cmd='/usr/local/Cellar/ctags/5.8_1/bin/ctags'
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

highlight PMenu ctermfg=0 ctermbg=242 guifg=black guibg=darkgrey
highlight PMenuSel ctermfg=242 ctermbg=8 guifg=darkgrey guibg=black

autocmd BufWritePost *.md call MdToHtml()
function! MdToHtml()
    exec "!pandoc -f markdown --metadata pagetitle=Markdown --to=html5 --highlight-style=haddock --self-contained -c $HOME/markdown-css/github.css % -o %.html"
endfunction

autocmd BufWritePost *.dot call DotToPng()
function! DotToPng()
    exec "!dot -Tpng % -o %:t.png"
endfunction

autocmd BufWritePost *.plantuml call PlantumlToPng()
function! PlantumlToPng()
    exec "!~/code/bobokit/sh/plantuml/plantuml.sh %"
endfunction

" Change cursor shape between insert and normal mode in iTerm2.app
if $TERM_PROGRAM =~ "iTerm"
let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode
endif

cs add ./cscope.out

nmap <C-\>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>i :vert scs find i <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>

nmap <C-\><C-\>s :scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\><C-\>g :scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\><C-\>c :scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\><C-\>t :scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\><C-\>e :scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\><C-\>i :scs find i <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\><C-\>d :scs find d <C-R>=expand("<cword>")<CR><CR>

let g:autopep8_disable_show_diff=1
let g:autopep8_max_line_length=79
let g:autopep8_on_save = 1
